---
description: Apply these rules when creating the project
globs:
alwaysApply: true
---
## Project Overview

*   **Type:** Customer Experience Platform for Short-Term Rental Hosts
*   **Description:** GoRently Portal is a customer experience platform designed to streamline check-in processes, offer upsell services, and provide digital guides for short-term rental hosts integrated with Guesty PMS. It supports Administrator, Host, and Guest interfaces.
*   **Primary Goal:** Deliver an intuitive, real-time platform that enhances guest check-in, enables dynamic upsell management, and provides comprehensive digital guides while maintaining seamless integrations with systems like Guesty, Stripe, and Twilio.

## Project Structure

### Framework-Specific Routing

*   **Directory Rules:**

    *   **Next.js 14 (App Router):** Enforce the use of the `app/` directory with nested route folders following the `app/[route]/page.tsx` conventions.
    *   Example 1: "Next.js 14 (App Router)" → `app/[route]/page.tsx` conventions
    *   Example 2: "Next.js (Pages Router)" → `pages/[route].tsx` pattern
    *   Example 3: "React Router 6" → `src/routes/` with `createBrowserRouter`

### Core Directories

*   **Versioned Structure:**

    *   **app/api:** Next.js 14 API routes with Route Handlers, suitable for handling real-time data sync with Guesty API.
    *   **app/dashboard:** Contains root layouts such as `app/dashboard/layout.tsx` for centralized admin and host dashboards.

### Key Files

*   **Stack-Versioned Patterns:**

    *   **app/dashboard/layout.tsx:** Next.js 14 root layout for dashboard components
    *   **pages/_app.js:** Used in Next.js Pages Router customization (if applicable)

## Tech Stack Rules

*   **Version Enforcement:**

    *   **next@14:** App Router required; avoid using legacy features like `getInitialProps`
    *   **tailwindcss@latest:** Follow updated configuration standards and purge unused styles
    *   **typescript@latest:** Enforce strict typing and linting rules
    *   **shadcn-ui@latest:** Integrate with Next.js 14 compliant components
    *   **clerk-auth@latest:** Follow secure authentication patterns with server-side validations

## PRD Compliance

*   **Non-Negotiable:**

    *   "Real-time reservation data refresh with Guesty API integration is mandatory, along with robust error logging for custom field mapping mismatches."

## App Flow Integration

*   **Stack-Aligned Flow:**

    *   Example: "Next.js 14 Auth Flow → `app/auth/login/page.tsx` uses server actions for secure login and session management"

## Best Practices

*   **Next.js**

    *   Use file-based routing consistently; do not mix App Router with Pages Router.
    *   Optimize performance via server-side data fetching and static generation where applicable.
    *   Maintain clear separation of components and API routes.

*   **Tailwind CSS**

    *   Follow a mobile-first approach with responsive design utilities.
    *   Leverage JIT mode for rapid development and minimized build sizes.
    *   Organize custom configuration in a consistent manner to avoid style conflicts.

*   **Typescript**

    *   Enforce strict mode and utilize interfaces to define component props.
    *   Integrate with ESLint and Prettier for code consistency.
    *   Use type inference for state management to minimize redundant type declarations.

*   **Shadcn UI**

    *   Utilize pre-built components that align with accessibility standards.
    *   Customize components while preserving their intrinsic reusability.
    *   Follow design tokens for consistent theming across the project.

*   **Clerk Auth**

    *   Ensure server-side validation of authentication tokens.
    *   Use Clerk’s hooks and components to manage authentication state and user sessions.
    *   Regularly update to the latest security patches and best practices recommended by Clerk.

## Rules

*   Derive folder/file patterns **directly** from techStackDoc versions.
*   If Next.js 14 App Router: Enforce `app/` directory with nested route folders.
*   If Pages Router: Use `pages/*.tsx` flat structure.
*   Mirror this logic for React Router, SvelteKit, etc.
*   Never mix version patterns (e.g., no `pages/` in App Router projects).

## Rules Metrics

Before starting the project development, create a metrics file in the root of the project called

`cursor_metrics.md`.

### Instructions:

*   Each time a cursor rule is used as context, update `cursor_metrics.md`.
*   Use the following format for `cursor_metrics.md:`

# Rules Metrics

## Usage

The number of times rules is used as context

*   rule-name.mdc: 5
*   another-rule.mdc: 2
*   ...other rules
